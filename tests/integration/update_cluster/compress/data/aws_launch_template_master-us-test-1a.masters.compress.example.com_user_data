Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/709B9I+ibxrJSvPvNqEF5jrd4jXpPLsPA4ZioMmzzJki1SOpxMM+/HCk5Kck67q+3BIgke754Xd3EtoGObZmqapywBi/di9fzMfzyTmqFpBIjIHhCw2yZEuuHQwYq7nhFcy9RV7BWHPnwJXMY4CBsMZzZQBnwXhVQ8m2FLljSjIsotcfW0BUEkr2R3TWAjplDXvOTgeR8EujQ6WM+5Bed4TsgbLZzmRWYSOytsgEqgdb4b8nvkff0/xs3QxT0u7AyD83Qw/iw4Epxjrmr37TAHvOjkySRtaePhgcaX1RCJltvLLUAnb0M984D7UcV2hDw54nDDCmbXUJLeiSKbO0g21XS1ZkZ1lRDKQV6wQvt1bNxDjPte4gBEbgJjrscMlM0HoAXsixDs4DOlKEFox35T5oSvaEzD+JEFXmbt46LGA0ncwBO4Bzre31FFWrNFQE8y4JbqzZ1Da4UfCrHfh5o0ZBKjACovcTRhbRgAeXuVZkEpY8aJ9Ek5uxDcaXrCBa8CuL6ndOCV5ZAv5IX/ONG1EYA8YWysiRlAjOlWyYxV+aFhrUKdpWScCSBnXQT+ZI1spRjtPU4xTVa16Da7iAS7UEsREaIvlS1crPuKkA4zsFqASMhKAYI2lKFXMejH9ndajhki9AR855Sm1/8vfpb6wGjInNQVgjE/MqeO6VqbZhvofFytp1ZL7jWsn72a+thBk4j0qQ2UibgbMBBfwUrOdUBC9kKnOX+cr7xpV5Xpx+FctXlGfDYXEo2a+dTiVPaPrfnaqnA8ZUzSso2fprl1UCM2Vz6voJb5RLQGqL7LSInSKGBj9FWAIi9M18s2l6bxPjAQ3Xk2l8vbDOG16n/ry82ePt5ohiQPgYwPkVcAkY4QIydjlZ5VWFUHFv8Vj25Y1HfhEfKSp106v8fDKD2no4iRInx3rf01QnvWOFyDqWf+so9BruViEuDTyIgDC16Et2dvYkUvYhOHEuEML7VvBGZaorWCZs3VAxM7jhdaOBCLcs/PD+1fztbPIZJnLbgFEyb4v8t+u121nsFs5kGiemZMVwmD09I2jkcc24NAkvuFiDkWVEWFoxY2s8Wq0Br+K13K4awT0QrMeT85nbLRvvuVidA/2d0fAIpWG+MWIKqKwsWVEP3X1rQKQoyWIK8ZunKcRixySg0DG+s37pFAeEMZmf2eDpoPcb7x7si22GJ3WX4m4IdAKehji3aRPv0crbl4IQHhwc7qMxggTjFdd9qcj1FO3Npvxk4k2YJXRGHuW56iZt99Hx6Ft+7R7dn2QTXe3ltRcvCczFCmTQqb332HBbmS+rT7dYyvtvk4h3uPt2Yy4d5y19Zq0vWf4JFJ2/nu/hvBjucWy8qv1rRljW2yt0DotQVcpUF9xITePf5wBt2t4XHGXJaqgtbjLecqVJ71kxHF6px8ZKWLoD8sOeqOi/+w4Bnv3/4eNY5VuiPfVA9q9bTvVMyJ9yqmLecsy1WuRdofOdwC2kGvDXFtfp4nazZRQxrLni7mMA5GnGD5cGlbOx8oobtQTnO8fgRb77isjrjusGNadKv/qv8f+2xtNlregjDLsNQ/n2/f4TAAD//wEAAP//mY8k/bUNAAA=" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RW247kthF9768QDBh+sSTeLw0/2NlFYiNeZ7FGPqBIFruFkcSOyO7dydcHlKZ7pzdrBElmniSRVcVTVaeO+FPOWPJ+1zQwBSXqS9soQ72hTlsuAJmL3DgbKQvGUmW41SzQ6FxUQQerURIrCAjtKLdBUMflj8dSTnnf97mkBQ7YHVI6jAinIXc+Tf3D2eEyY8HcLjgiZOyvzwvtGO1I74a5H4f5/Klfca0uI5YVno1aRBZBI3IGgWikmlGqmbSWMWGEJpwSD9Qaw6iQ1BiiHLeOBgg2kleC58u4wdPaMGE5C1Ip7TVwDaCAe+dAEEoIKKM5aleLZzgah4Zr5KghBgLmP8IzuYWlDBF8ya2fh8/oSGc63ft5aE/j+TDMuV1BtivIdtvuyuGfK04QICAKrRWvbeUegrRWeaWCtNE4AQyiCKCpctoS5jSwIKMEzxUL3t9wHoZyPLsVm09zgWHGJTx/fcKX+5A+zmOCUOsoOkp7vwztZ8OaTLvtPAfeFVi6J9DREgwqeIySC1SBAlJtiQ5eoxNEUeGMFRKCgKgjQWsCc6h9QEOV9OoG+lbB7sHkbki1pbAMmPuHdMr91ucWxtMROnrX69OSSqoN//4rBfjMnS3OV1O/C30L9zzljUjWMtToGDC0PGprUYJFa9BpahTXgnPJhPNKRsUJl5oRCtpGYR3lgbxArv4I84xjfplUr9G+yBSW6ao8VBvOHLXMoUTgVGgqokaqMAaJMirJhbZaOOeioAGjcoRFZSyn3BAvXna0K6475QERgqaERCk0CBI4smi4kSQQB05LrxAkOil5JGAIBB81p1I6jDQGEl4J3lV5ACkP2klPpAvUEATrpFMmCuECgHbRCUq4AIaRBmViMEiZtNrqoASLr6E8FeSXykPYKjBKahYJ85EEiEFzYzwQFBBicC6CA0N9dNRpITgaG713GBjz+obzyrQuJP+AywpyK04uUAZfH27EHmDxRyX6zaxlpKOkszc8LEprPQ9SROGFC857KwEi8dpJysEIGUy0knD00nHhbTQKgDrPRfTE/3+DtrbxtUWlHrKJSjCCIVdcgZUBGafSB4QqksAM41ICeKKkwUicUUEGz4SwRCnJTaT8BXJ9XVFZM30znnPB5TeYcN/4NJ0WzLnDTzCdRqwH7d6kOQ6HP0HGfTPhFCsOv3ndGfZf9f5lzgVmj39Z0vm0nTJB9W3PuS2YS0vh3uhDGnHfvFuNdn/dNGXDsF6+5jQ/TumcfzqX476JMGbcNY0/VNe3y3DBZd/kx1xwCrf1DymVfdPX7zGdw/slXYZQDeFjXhfXbN7+9vu+oYR0SnSV98920gTDvL9+dmPyUIUE5zo0b9GdD4dhPvwMcxhxyfumLOeKCi+DL0Oaf4YlrMVLy2MHFxjG6vcDJeTd8P2cAsZ8t/ztdXGoz/znBfEH+e33wwSHfze9rt7Z7prmmHKZYcK/XXBZhoD75rsf4WP+btc0qxSuJX0PtYr9BZZ+HNxVwvvPBrumGdPhV7zguG/YrmlmLB/T8vB+Fa8n2sxD3UgBfwWH43pJbprKyivj6/t6fVnSOOLSnh6GffPNN5vdjcjVclm7v1Fk3a5h27ra3Rs+RWtPI8x4C/ZH1lvAO7MvLPCTH88B27ikqcVPBZcZxrYOUutgrOysjV395zS/g/yPMy4Q8M0vbz88ow3pV+KcUngH8xAxl6cSY/HPZ3Z62q38W/AwVHi/+yOG89rZK7P/fgpQ8H0aB/+4b+Bc0lTlened5f2u/e+HsocQ0px7l1LJZYFT+xSue4Rp3GHxN/D/4wG37Graoa/Ts8V+gWB4wbnkLdz287oD+4CP+5VTbf0b43LBpT0ijOXoj+gfam/WhnyO+vQH/GOf7ax/AQAA//8BAAD//1Riy/oBDgAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
