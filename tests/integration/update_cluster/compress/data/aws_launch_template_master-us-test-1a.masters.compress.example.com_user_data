Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/+xWbW/bthN/709B9I+ibxrJSvPvNqEF5jrd4jXpPLsPA4ZioMmzzJki1SOpxMM+/HCk5Kck67q+3BIgke754Xd3EtoGObZmqapywBi/di9fzMfzyTmqFpBIjIHhCw2yZEuuHQwYq7nhFcy9RV7BWHPnwJXMY4CBsMZzZQBnwXhVQ8m2FLljSjIsotcfW0BUEkr2R3TWAjplDXvOTgeR8EujQ6WM+5Bed4TsgbLZzmRWYSOytsgEqgdb4b8nvkff0/xs3QxT0u7AyD83Qw/iw4Epxjrmr37TAHvOjkySRtaePhgcaX1RCJltvLLUAnb0M984D7UcV2hDw54nDDCmbXUJLeiSKbO0g21XS1ZkZ1lxOpBWrBO83Fo1E+M817qDEBiBm+iwwyUzQesBeCHHOjgP6EgRWjDelfugKdkTMv8kQlSZu3nrsIDRdDIH7ADOtbbXU1St0lARzLskuLFmU9vgRsGvduDnjRoFqcAIiN5PGFlEAx5c5lqRSVjyoH0STW7GNhhfsoJowa8sqt85JXhlCfgjfc03bkRhDBhbKCNHUiI4V7JhFn9pWmhQp2hbJQFLGtRBP5kjWStHOU5Tj1NUr3kNruECLtUSxEZoiORLVSs/46YCjO8UoBIwEoJijKQpVcx5MP6d1aGGS74AHTnnKbX9yd+nv7EaMCY2B2GNTMyr4LlXptqG+R4WK2vXkfmOayXvZ7+2EmbgPCpBZiNtBs4GFPBTsJ5TEbyQqcxd5ivvG1fmeXH6VSxfUZ4Nh8WhZL92OpU8oel/d6qeDhhTNa+gZOuvXVYJzJTNqesnvFEuAaktstMidooYGvwUYQmI0DfzzabpvU2MBzRcT6bx9cI6b3id+vPyZo+3myOKAeFjAOdXwCVghAvI2OVklVcVQsW9xWPZlzce+UV8pKjUTa/y88kMauvhJEqcHOt9T1Od9I4VIutY/q2j0Gu4W4W4NPAgAsLUoi/Z2dmTSNmH4MS5QAjvW8EblamuYJmwdUPFzOCG140GItyy8MP7V/O3s8lnmMhtA0bJvC3y367XbmexWziTaZyYkhXDYfb0jKCRxzXj0iS84GINRpYRYWnFjK3xaLUGvIrXcrtqBPdAsB5Pzmdut2y852J1DvR3RsMjlIb5xogpoLKyZEU9dPetAZGiJIspxG+ephCLHZOAQsf4zvqlUxwQxmR+ZoOng95vvHuwL7YZntRdirsh0Al4GuLcpk28RytvXwpCeHBwuI/GCBKMV1z3pSLXU7Q3m/KTiTdhltAZeZTnqpu03UfHo2/5tXt0f5JNdLWX1168JDAXK5BBp/beY8NtZb6sPt1iKe+/TSLe4e7bjbl0nLf0mbW+ZPknUHT+er6H82K4x7HxqvavGWFZb6/QOSxCVSlTXXAjNY1/nwO0aXtfcJQlq6G2uMl4y5UmvWfFcHilHhsrYekOyA97oqL/7jsEePb/h49jlW+J9tQD2b9uOdUzIX/KqYp5yzHXapF3hc53AreQasBfW1yni9vNllHEsOaKu48BkKcZP1waVM7Gyitu1BKc7xyDF/nuKyKvO64b1Jwq/eq/xv/bGk+XtaKPMOw2DOXb9/tPAAAA//8BAAD//3tW5Va1DQAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7RW247kthF9768QDBh+sSTeLw0/2NlFYiNeZ7FGPqBIFruFkcSOyO7dydcHlKZ7pjdrBEl2niSRVcVTVaeO+FPOWPJ+1zQwBSXqS9soQ72hTlsuAJmL3DgbKQvGUmW41SzQ6FxUQQerURIrCAjtKLdBUMflj8dSTnnf97mkBQ7YHVI6jAinIXc+Tf3D2eEyY8HcLjgiZOyvzwvtGO1I74a5H4f5/Klfca0uI5YVno1aRBZBI3IGgWikmlGqmbSWMWGEJpwSD9Qaw6iQ1BiiHLeOBgg2kleC58u4wdPaMGE5C1Ip7TVwDaCAe+dAEEoIKKM5aleLZzgah4Zr5KghBgLmP8IzuYWlDBF8ya2fh2d0pDOd7v08tKfxfBjm3K4g2xVku2135fDPFWdUlBEpmSCGaumBcxYDdzJw6iWGQKkMRjAVlOZUKYECgVtZNxG5Ezech6Ecz27F5tNcYJhxCS9fn/DlPqSP85gg1DqKjrLeL0P7bFiTabedl8C7Akt3BW0JBhU8RskFqkABqbZEB6/RCaKocMYKCUFA1JGgNYE51D6goUp6dQN9q2D3YHI3pNpSWAbM/UM65X7rcwvj6Qgdvev1aUkl1YZ//4UCPHNni/PF1O9C38K9THkjkrUMNToGDC2P2lqUYNEadJoaxbXgXDLhvJJRccKlZoSCtlFYR3kgXyFXf4R5xjF/nVSv0T7LFJbpqjxUG84ctcyhROBUaCqiRqowBokyKsmFtlo456KgAaNyhEVlLKfcEC++7mhXXHfKAyIETQmJUmgQJHBk0XAjSSAOnJZeIUh0UvJIwBAIPmpOpXQYaQwkvBK8q/IAUh60k55IF6ghCNZJp0wUwgUA7aITlHABDCMNysRgkDJptdVBCRZfQ3kqyM+Vx2gQjFovhZRMWx1j4EZb4jQznHHNwBL06LQ3KCT1XIEyjFgepA6Az0N8ZVoXkn/AZQW5FScXKIOvDzdiD7D4oxL9ZtYy0lHSUXoDxKK01vMgRRReuOC8txIgEq+dpByMkMFEKwlHLx0X3kajAKjzXERP/P83aWsfX1tV6iGbqlRRR664AisDMk6lDwhVJYEZxqUE8ERJg5E4o4IMnglhiVKSm0j5V8j1dVVlzfTNeM4Fl99gwn3j03RaMOcOP8F0GrEetHuT5jgc/gQZ982EU6w4/OZ1Z9h/0fuXOReYPf5lSefTdsoE1bc957ZgLi2Fe6MPacR982412v11E5UNw3r7mtP8OKVz/ulcjvsmwphx1zT+UF3fLsMFl32TH3PBKdzWP6RU9k1fv8d0Du+XdBlCNYSPeV1cs3n72+/7hhLSKdFV4r/YSRMM8/762Y3JQ1USnOvUvEV3PhyG+fAzzGHEJe+bspwrKrwMvgxp/hmWsBYvLY8dXGAYq98PlJB3w/dzChjz3fK318WhPvOfF8Qf5LffDxMc/t30unpnu2uaY8plhgn/dsFlGQLum+9+hI/5u13TrFq4lvQ91Cr2F1j6cXBXDe+fDXZNM6bDr3jBcd+wXdPMWD6m5eH9ql5PtJmHupEC/goOx/WW3DSVlVfG1/f1/rKkccSlPT0M++abbza7G5Gr5bJ2f6PIul3DtnW1uzd8itaeRpjxFuyPrLeAd2afWeAnP54DtnFJU4ufCi4zjG0dpNbBWNlZG7v6z2l+B/kfZ1wg4Jtf3n54QRvSr8Q5pfAO5iFiLk8lxuJfzuz0tFv5t+BhqPB+90cM57WzV2b//RSg4Ps0Dv5x38C5pKnq9e46y/td+98PZQ8hpDn3LqWSywKn9ilc9wjTuMPib+D/xwNu2dW0Q1+nZ4v9FYLhBeeSt3Db3+sO7AM+7ldOtfV3jMsFl/aIMJajP6J/qL1ZG/Ic9ekX+Mc+21n/AgAA//8BAAD//5HW9fwCDgAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
