Content-Type: multipart/mixed; boundary="MIMEBOUNDARY"
MIME-Version: 1.0

--MIMEBOUNDARY
Content-Disposition: attachment; filename="nodeup.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/bash
set -o errexit
set -o nounset
set -o pipefail

NODEUP_URL_AMD64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/amd64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-amd64
NODEUP_HASH_AMD64=585fbda0f0a43184656b4bfc0cc5f0c0b85612faf43b8816acca1f99d422c924
NODEUP_URL_ARM64=https://artifacts.k8s.io/binaries/kops/1.21.0-alpha.1/linux/arm64/nodeup,https://github.com/kubernetes/kops/releases/download/v1.21.0-alpha.1/nodeup-linux-arm64
NODEUP_HASH_ARM64=7603675379699105a9b9915ff97718ea99b1bbb01a4c184e2f827c8a96e8e865

export AWS_REGION=us-test-1




sysctl -w net.ipv4.tcp_rmem='4096 12582912 16777216' || true


function ensure-install-dir() {
  INSTALL_DIR="/opt/kops"
  # On ContainerOS, we install under /var/lib/toolbox; /opt is ro and noexec
  if [[ -d /var/lib/toolbox ]]; then
    INSTALL_DIR="/var/lib/toolbox/kops"
  fi
  mkdir -p ${INSTALL_DIR}/bin
  mkdir -p ${INSTALL_DIR}/conf
  cd ${INSTALL_DIR}
}

# Retry a download until we get it. args: name, sha, url1, url2...
download-or-bust() {
  local -r file="$1"
  local -r hash="$2"
  shift 2

  urls=( $* )
  while true; do
    for url in "${urls[@]}"; do
      commands=(
        "curl -f --ipv4 --compressed -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only --compression=auto -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
        "curl -f --ipv4 -Lo "${file}" --connect-timeout 20 --retry 6 --retry-delay 10"
        "wget --inet4-only -O "${file}" --connect-timeout=20 --tries=6 --wait=10"
      )
      for cmd in "${commands[@]}"; do
        echo "Attempting download with: ${cmd} {url}"
        if ! (${cmd} "${url}"); then
          echo "== Download failed with ${cmd} =="
          continue
        fi
        if [[ -n "${hash}" ]] && ! validate-hash "${file}" "${hash}"; then
          echo "== Hash validation of ${url} failed. Retrying. =="
          rm -f "${file}"
        else
          if [[ -n "${hash}" ]]; then
            echo "== Downloaded ${url} (SHA1 = ${hash}) =="
          else
            echo "== Downloaded ${url} =="
          fi
          return
        fi
      done
    done

    echo "All downloads failed; sleeping before retrying"
    sleep 60
  done
}

validate-hash() {
  local -r file="$1"
  local -r expected="$2"
  local actual

  actual=$(sha256sum ${file} | awk '{ print $1 }') || true
  if [[ "${actual}" != "${expected}" ]]; then
    echo "== ${file} corrupted, hash ${actual} doesn't match expected ${expected} =="
    return 1
  fi
}

function split-commas() {
  echo $1 | tr "," "\n"
}

function try-download-release() {
  local -r nodeup_urls=( $(split-commas "${NODEUP_URL}") )
  if [[ -n "${NODEUP_HASH:-}" ]]; then
    local -r nodeup_hash="${NODEUP_HASH}"
  else
  # TODO: Remove?
    echo "Downloading sha256 (not found in env)"
    download-or-bust nodeup.sha256 "" "${nodeup_urls[@]/%/.sha256}"
    local -r nodeup_hash=$(cat nodeup.sha256)
  fi

  echo "Downloading nodeup (${nodeup_urls[@]})"
  download-or-bust nodeup "${nodeup_hash}" "${nodeup_urls[@]}"

  chmod +x nodeup
}

function download-release() {
  case "$(uname -m)" in
  x86_64*|i?86_64*|amd64*)
    NODEUP_URL="${NODEUP_URL_AMD64}"
    NODEUP_HASH="${NODEUP_HASH_AMD64}"
    ;;
  aarch64*|arm64*)
    NODEUP_URL="${NODEUP_URL_ARM64}"
    NODEUP_HASH="${NODEUP_HASH_ARM64}"
    ;;
  *)
    echo "Unsupported host arch: $(uname -m)" >&2
    exit 1
    ;;
  esac

  # In case of failure checking integrity of release, retry.
  cd ${INSTALL_DIR}/bin
  until try-download-release; do
    sleep 15
    echo "Couldn't download release. Retrying..."
  done

  echo "Running nodeup"
  # We can't run in the foreground because of https://github.com/docker/docker/issues/23793
  ( cd ${INSTALL_DIR}/bin; ./nodeup --install-systemd-unit --conf=${INSTALL_DIR}/conf/kube_env.yaml --v=8  )
}

####################################################################################

/bin/systemd-machine-id-setup || echo "failed to set up ensure machine-id configured"

echo "== nodeup node config starting =="
ensure-install-dir

echo "H4sIAAAAAAAA/6RUbWvbMBD+7l9xFEq/dLIdurKZFrYlGy2sXUg+jjIU66KKyDpXL84C+/FDchInGYy9+Iut5950zz3nWlMQYzJLJasMgK/dxw/z8fx+YlWHNkIAaPhCo6hgybXDDKDhhkuce7Jc4lhz59BV4G3ArCbjuTJoZ8F41WAFe0QMRhET16nqlw6tVQIr+JGKdWidIgO3MMoS8LXVQSrjnvrjALAzRWxIyaRta9aVrLbqbO/8Z+4H+EHkX8cy2zftjpL8e5r4UT8dpQLYGr/5TYtwCycpYwTrRmfZSdR/XYFR6xXFEcDJM984j40YS0uhhdteAwCa5GfsUFegzJKy/VQrKNkVK0eZoHrVy8utVHtvnOdabyW0CgucWvq+SSLRwXm04/vJrIKyKNjba1awIi/LaGzDDF8COp9sTQbwTM4b3uAgq4t3fO0uMgDVcIkVrN44JmvLFOWx0qs2lepKNipZcXT3UbqKRp82w5DZNBTc++Cfh1WoU+fbbQHX07HHZ0S+gjz1QUFMLXVKREe+dkNzk8d539v1FStYWRxYqOHKVLsj01Rzne02coKLIKUy8o4bodHudhAAO1XHid1xKyposCG7YbzjSse4m7IoHtSlIYFLdwSf70AV3+6TRbx5fX6ZmPvFdYce+f5+BJHPfu2nPLKYd9zmWi3yLdH54HAyCQCDfk12NU06fuTp12JUNJB54O4loOUCB6EkMos80dmSeOBGLdH5bWH0dSpmDXp0ebO1uuwnAAAA//8BAAD//3lk3Z8RBQAA" | base64 -d | gzip -d > conf/cluster_spec.yaml

echo "H4sIAAAAAAAA/6qu5QIAAAD//wEAAP//BrCh3QMAAAA=" | base64 -d | gzip -d > conf/ig_spec.yaml

echo "H4sIAAAAAAAA/7SV3Y7cJhTH7+cprEhRbmKbT4OtXCTNqk3UJF2l6gMc4DCLYsMUmNlsn76yZyfZbStVlbpXxucDfv7zB78pBWuZdk0DixvEOmibQVOrqVEjF4DMeK7N6ClzeqSD5qNijnpj/OCUGxVKMgoCQhnKRyeo4fL1Ta2HMvV9qSnDHrt9SvsZ4RBKZ9PSfzkazBErljbjjFCwvzxPtGO0I70JsZ9DPH7tN66tZca64Y1eCc88KETOwBGFVDFKFZPjyJjQQhFOiQU6as2okFRrMhg+GurAjZ48EZ6t8xlPKc3EyJmTw6CsAq4ABuDWGBCEEgKDVhyVWcXTHLVBzRVyVOAdAf2veLq0kGvwYGtpbQzf6UinO9XbGNrDfNyHWNoNst0g23O6q/s/Nk4/UEakZIJoqqQFzpl33EjHqZXoHKXSacEGNyhOh0GgQOCjXJOI3IhvnPtQb45mY7MpVggRs3s4vOcrvUu3cU7gVh1FR1lvc2i/F64f054zD8G7CrnboCEvF49SpTkzdGQGJQKnQlHhFdIBvZMo/SC5UKMSxhgvqEM/GML8oEdOuSZW/L8mWLkeeRSEc4oS4qVQIIjjyLzmWhJHDBgl7YAg0UjJPQFNwFmvOJXSoKfeEfdEeBePAlLulJGWSOOoJgijkWbQXgjjAJTxRlDCBTD01A3aO42UyVGNyg2C+afw6Ar5V49qBYLR0UohJVOj8t5xrUZiFNOcccVgJGjRKKtRSGr5AINmZOROKgc4fOO8OK9zyX7BvEGexSkVarDrw8zYA2R7M4j+XNYy0lHSUboBvZ2PpWL+BAtOjU3LIWMpHX6F5TDjOuPubYo+7H+AglOz4OLXle2561Fh/4/d72OpEC3+lNPxcF4lJoflceJzmnFqPiWHu5/Phjuvut3hMcW7JR3Lm2O9mRoPc8Fd09j92niVwwnz1JS7UnFx3+KfU6pT06/vczq665xOwa2FcFu24MZ/9enXqaGEdIPoVlEeZNICIU6X125OFlaXYVwVvUJz3O9D3L+D6GbMZWpqPq5UeAq2hhTfQXabXCnfdXCCMK99ryghH8PLVQBfHoWfX4JhU+fHjPhKPn8ZFtj/vfQSfVS7a5qbVGqEBX85Yc7B4dS8eA235cWuabZzskl6DauK/QlyPwdzOd/994Jd08xp/wFPOE8N2zVNxHqb8pfrzdn3RolhTSSHH8DgvP1rz4ucz28XUp+3PV1rtuQ6aNdY97hsjU/Ns2fbfPEjlN+PmMHh2/dXnx9sDum37Tkk9xFi8Fjq/YdgtQ8ujn65z5bdbwcHFa/THOzd1MCxpmU9FDt7AzFuzO1/93MPzqVYepNSLTXDob2frruDZd79CQAA//8BAAD//xR2Lux6CAAA" | base64 -d | gzip -d > conf/kube_env.yaml

download-release
echo "== nodeup node config done =="

--MIMEBOUNDARY
Content-Disposition: attachment; filename="myscript.sh"
Content-Transfer-Encoding: 7bit
Content-Type: text/x-shellscript
Mime-Version: 1.0

#!/bin/sh
echo "nodes: The time is now $(date -R)!" | tee /root/output.txt

--MIMEBOUNDARY--
